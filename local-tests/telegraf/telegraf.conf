# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB 2.0 https://github.com/influxdata/telegraf/blob/release-1.13/plugins/outputs/influxdb/README.md
 [[outputs.influxdb]]
  urls = [
    "http://0.0.0.0:8086"
  ]
  # The target database for metrics; will be created as needed.
  database = "influxdb"



###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read formatted metrics from one or more HTTP endpoints https://github.com/influxdata/telegraf/blob/release-1.13/plugins/inputs/http/README.md
[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = [ "http://127.0.0.1:8000/amp/metrics?sap-client=001&scenario=example-influxdb"]

  # HTTP method
   method = "GET"

  ## Optional HTTP headers
  # headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP entity-body to send with POST/PUT requests.
  # body = ""

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  # Optional HTTP Basic Auth Credentials
  username = "$username"
  password = "$password"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Amount of time allowed to complete the HTTP request
  # timeout = "5s"

  ## List of success status codes
  # success_status_codes = [200]

  # Data format to consume.
  # Each data format has its own unique set of configuration options, read
  # more about them here:
  # https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json"
  
[[inputs.prometheus]]
  ## An array of urls to scrape metrics from.
  urls = ["http://127.0.0.1:8000/amp/metrics?sap-client=001&scenario=example-prometheus"]

  ## Metric version controls the mapping from Prometheus metrics into
  ## Telegraf metrics.  When using the prometheus_client output, use the same
  ## value in both plugins to ensure metrics are round-tripped without
  ## modification.
  ##
  ##   example: metric_version = 1; deprecated in 1.13
  ##            metric_version = 2; recommended version
  metric_version = 1

  ## HTTP Basic Authentication username and password. ('bearer_token' and
  ## 'bearer_token_string' take priority)
  username = "$username"
  password = "$password"

 # Ping given url(s) and return statistics
 [[inputs.ping]]
   ## Hosts to send ping packets to.
   urls = ["github.com", "npmjs.com"]

   ## Method used for sending pings, can be either "exec" or "native".  When set
   ## to "exec" the systems ping command will be executed.  When set to "native"
   ## the plugin will send pings directly.
   ##
   ## While the default is "exec" for backwards compatibility, new deployments
   ## are encouraged to use the "native" method for improved compatibility and
   ## performance.
   # method = "exec"

   ## Number of ping packets to send per interval.  Corresponds to the "-c"
   ## option of the ping command.
   # count = 1

   ## Time to wait between sending ping packets in seconds.  Operates like the
   ## "-i" option of the ping command.
   # ping_interval = 1.0

   ## If set, the time to wait for a ping response in seconds.  Operates like
   ## the "-W" option of the ping command.
   # timeout = 1.0

   ## If set, the total ping deadline, in seconds.  Operates like the -w option
   ## of the ping command.
   # deadline = 10

   ## Interface or source address to send ping from.  Operates like the -I or -S
   ## option of the ping command.
   # interface = ""

   ## Specify the ping executable binary.
   # binary = "ping"

   ## Arguments for ping command. When arguments is not empty, the command from
   ## the binary option will be used and other options (ping_interval, timeout,
   ## etc) will be ignored.
   # arguments = ["-c", "3"]

   ## Use only IPv6 addresses when resolving a hostname.
   # ipv6 = false  

 # Collect response time of a TCP or UDP connection
 [[inputs.net_response]]
   protocol = "tcp"
   address = "localhost:8000"
 [[inputs.net_response]]
   protocol = "tcp"
   address = "localhost:3000"